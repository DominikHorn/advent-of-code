import Foundation

/*
 --- Day 15: Chiton ---
 
 You've almost reached the exit of the cave, but the walls are getting closer together. Your submarine can barely still fit, though; the main problem is that the walls of the cave are covered in chitons, and it would be best not to bump any of them.
 
 The cavern is large, but has a very low ceiling, restricting your motion to two dimensions. The shape of the cavern resembles a square; a quick scan of chiton density produces a map of risk level throughout the cave (your puzzle input). For example:
 
 1163751742
 1381373672
 2136511328
 3694931569
 7463417111
 1319128137
 1359912421
 3125421639
 1293138521
 2311944581
 You start in the top left position, your destination is the bottom right position, and you cannot move diagonally. The number at each position is its risk level; to determine the total risk of an entire path, add up the risk levels of each position you enter (that is, don't count the risk level of your starting position unless you enter it; leaving it adds no risk to your total).
 
 Your goal is to find a path with the lowest total risk. In this example, a path with the lowest total risk is highlighted here:
 
 1163751742
 1381373672
 2136511328
 3694931569
 7463417111
 1319128137
 1359912421
 3125421639
 1293138521
 2311944581
 The total risk of this path is 40 (the starting position is never entered, so its risk is not counted).
 
 What is the lowest total risk of any path from the top left to the bottom right?
 
 --- Part Two ---

 Now that you know how to find low-risk paths in the cave, you can try to find your way out.

 The entire cave is actually five times larger in both dimensions than you thought; the area you originally scanned is just one tile in a 5x5 tile area that forms the full map. Your original map tile repeats to the right and downward; each time the tile repeats to the right or downward, all of its risk levels are 1 higher than the tile immediately up or left of it. However, risk levels above 9 wrap back around to 1. So, if your original map had some position with a risk level of 8, then that same position on each of the 25 total tiles would be as follows:

 8 9 1 2 3
 9 1 2 3 4
 1 2 3 4 5
 2 3 4 5 6
 3 4 5 6 7
 Each single digit above corresponds to the example position with a value of 8 on the top-left tile. Because the full map is actually five times larger in both dimensions, that position appears a total of 25 times, once in each duplicated tile, with the values shown above.

 Here is the full five-times-as-large version of the first example above, with the original map in the top left corner highlighted:

 11637517422274862853338597396444961841755517295286
 13813736722492484783351359589446246169155735727126
 21365113283247622439435873354154698446526571955763
 36949315694715142671582625378269373648937148475914
 74634171118574528222968563933317967414442817852555
 13191281372421239248353234135946434524615754563572
 13599124212461123532357223464346833457545794456865
 31254216394236532741534764385264587549637569865174
 12931385212314249632342535174345364628545647573965
 23119445813422155692453326671356443778246755488935
 22748628533385973964449618417555172952866628316397
 24924847833513595894462461691557357271266846838237
 32476224394358733541546984465265719557637682166874
 47151426715826253782693736489371484759148259586125
 85745282229685639333179674144428178525553928963666
 24212392483532341359464345246157545635726865674683
 24611235323572234643468334575457944568656815567976
 42365327415347643852645875496375698651748671976285
 23142496323425351743453646285456475739656758684176
 34221556924533266713564437782467554889357866599146
 33859739644496184175551729528666283163977739427418
 35135958944624616915573572712668468382377957949348
 43587335415469844652657195576376821668748793277985
 58262537826937364893714847591482595861259361697236
 96856393331796741444281785255539289636664139174777
 35323413594643452461575456357268656746837976785794
 35722346434683345754579445686568155679767926678187
 53476438526458754963756986517486719762859782187396
 34253517434536462854564757396567586841767869795287
 45332667135644377824675548893578665991468977611257
 44961841755517295286662831639777394274188841538529
 46246169155735727126684683823779579493488168151459
 54698446526571955763768216687487932779859814388196
 69373648937148475914825958612593616972361472718347
 17967414442817852555392896366641391747775241285888
 46434524615754563572686567468379767857948187896815
 46833457545794456865681556797679266781878137789298
 64587549637569865174867197628597821873961893298417
 45364628545647573965675868417678697952878971816398
 56443778246755488935786659914689776112579188722368
 55172952866628316397773942741888415385299952649631
 57357271266846838237795794934881681514599279262561
 65719557637682166874879327798598143881961925499217
 71484759148259586125936169723614727183472583829458
 28178525553928963666413917477752412858886352396999
 57545635726865674683797678579481878968159298917926
 57944568656815567976792667818781377892989248891319
 75698651748671976285978218739618932984172914319528
 56475739656758684176786979528789718163989182927419
 67554889357866599146897761125791887223681299833479
 Equipped with the full map, you can now find a path from the top left corner to the bottom right corner with the lowest total risk:

 11637517422274862853338597396444961841755517295286
 13813736722492484783351359589446246169155735727126
 21365113283247622439435873354154698446526571955763
 36949315694715142671582625378269373648937148475914
 74634171118574528222968563933317967414442817852555
 13191281372421239248353234135946434524615754563572
 13599124212461123532357223464346833457545794456865
 31254216394236532741534764385264587549637569865174
 12931385212314249632342535174345364628545647573965
 23119445813422155692453326671356443778246755488935
 22748628533385973964449618417555172952866628316397
 24924847833513595894462461691557357271266846838237
 32476224394358733541546984465265719557637682166874
 47151426715826253782693736489371484759148259586125
 85745282229685639333179674144428178525553928963666
 24212392483532341359464345246157545635726865674683
 24611235323572234643468334575457944568656815567976
 42365327415347643852645875496375698651748671976285
 23142496323425351743453646285456475739656758684176
 34221556924533266713564437782467554889357866599146
 33859739644496184175551729528666283163977739427418
 35135958944624616915573572712668468382377957949348
 43587335415469844652657195576376821668748793277985
 58262537826937364893714847591482595861259361697236
 96856393331796741444281785255539289636664139174777
 35323413594643452461575456357268656746837976785794
 35722346434683345754579445686568155679767926678187
 53476438526458754963756986517486719762859782187396
 34253517434536462854564757396567586841767869795287
 45332667135644377824675548893578665991468977611257
 44961841755517295286662831639777394274188841538529
 46246169155735727126684683823779579493488168151459
 54698446526571955763768216687487932779859814388196
 69373648937148475914825958612593616972361472718347
 17967414442817852555392896366641391747775241285888
 46434524615754563572686567468379767857948187896815
 46833457545794456865681556797679266781878137789298
 64587549637569865174867197628597821873961893298417
 45364628545647573965675868417678697952878971816398
 56443778246755488935786659914689776112579188722368
 55172952866628316397773942741888415385299952649631
 57357271266846838237795794934881681514599279262561
 65719557637682166874879327798598143881961925499217
 71484759148259586125936169723614727183472583829458
 28178525553928963666413917477752412858886352396999
 57545635726865674683797678579481878968159298917926
 57944568656815567976792667818781377892989248891319
 75698651748671976285978218739618932984172914319528
 56475739656758684176786979528789718163989182927419
 67554889357866599146897761125791887223681299833479
 The total risk of this path is 315 (the starting position is still never entered, so its risk is not counted).

 Using the full map, what is the lowest total risk of any path from the top left to the bottom right?
 
 */

/// A\* graph node
class Node: Comparable, Hashable {
  var cost: Int
  var estimatedRemaining: Int
  var coordinate: Coordinate
  var previous: Node?
  
  init(cost: Int, estimatedRemaining: Int, coordinate: Coordinate, previous: Node? = nil) {
    self.cost = cost
    self.estimatedRemaining = estimatedRemaining
    self.coordinate = coordinate
    self.previous = previous
  }
  
  static func < (lhs: Node, rhs: Node) -> Bool {
    lhs.cost + lhs.estimatedRemaining < rhs.cost + rhs.estimatedRemaining
  }
  
  static func == (lhs: Node, rhs: Node) -> Bool {
    lhs.coordinate == rhs.coordinate
  }
  
  func hash(into hasher: inout Hasher) {
    hasher.combine(coordinate)
  }
  
  var neighbors: [Coordinate] {
    let x = coordinate.x
    let y = coordinate.y
    
    return [
      .init(x: x, y: y - 1), // above
      .init(x: x + 1, y: y), // right
      .init(x: x, y: y + 1), // bellow
      .init(x: x - 1, y: y)  // left
    ]
  }
  
  var path: [Coordinate] {
    var current: Node? = self
    var res = [Coordinate]()
    while let c = current {
      res.append(c.coordinate)
      current = c.previous
    }
    
    return res.reversed()
  }
}

/// Heap/Priority Queue mix for A\* algorithm
struct NodeList {
  private var elements = [Node]()
  private var index = [Coordinate: Int]()
  
  private mutating func swap(_ i1: Int, _ i2: Int) {
    precondition(
      i1 >= 0
      && i2 >= 0
      && i1 < elements.count
      && i2 < elements.count
    )
    
    // update index
    index[elements[i1].coordinate] = i2
    index[elements[i2].coordinate] = i1
    
    // update elements
    let swap = elements[i1]
    elements[i1] = elements[i2]
    elements[i2] = swap
  }
  
  /// sift element at  `index` up until heap invariant is restored. Returns final index
  private mutating func siftUp(_ index: Int) {
    guard index >= 0 && index < elements.count else { return }
    
    var i = index
    while elements[i] < elements[(i - 1) / 2] {
      swap((i - 1) / 2, i)
      i = (i - 1) / 2
    }
  }
  
  /// sift element at `index` down until heap invariant is restored. Returns final index
  private mutating func siftDown(_ index: Int) -> Int {
    guard index >= 0 && index < elements.count else { return index }
    
    var i = index
    var smallest = i
    
    repeat {
      swap(i, smallest)
      i = smallest
      
      let left = 2 * i + 1
      let right = 2 * i + 2
      
      if left < elements.count && elements[left] < elements[i] {
        smallest = left
      }
      if right < elements.count && elements[right] < elements[smallest] {
        smallest = right
      }
    } while smallest != i
    
    return i
  }
  
  mutating func insertOrUpdate(_ node: Node) {
    if let i = index[node.coordinate] {
      elements[i] = node
      siftUp(siftDown(i))
    } else {
      elements.append(node)
      index[node.coordinate] = elements.count - 1
      siftUp(elements.count-1)
    }
  }
  
  /// reveals the top element without modifying the heap
  func peek() -> Node? { elements.first }
  
  /// returns node for a given coordinate iff node is in this heap
  func cost(at coordinate: Coordinate) -> Int? {
    guard let i = index[coordinate] else { return nil }
    return elements[i].cost
  }
  
  /// removes the min element from the Heap
  mutating func pop() -> Node? {
    guard elements.count > 0, let first = elements.first else {
      return nil
    }
    
    let last = elements.removeLast()
    index.removeValue(forKey: first.coordinate)
    index.removeValue(forKey: last.coordinate)
    guard first != last else { return first }
    
    elements[0] = last
    index.removeValue(forKey: last.coordinate)
    index[last.coordinate] = 0
    _ = siftDown(0)
    
    return first
  }
  
  /// true if this heap does not contain any elements
  var isEmpty: Bool { elements.isEmpty }
}

enum ParsingError: Error {
  case illegalInput
  case illegalRiskLevel(_ raw: Character)
}

struct Coordinate: Hashable {
  var x: Int
  var y: Int
}

extension Coordinate: CustomStringConvertible {
  var description: String {
    "(\(x), \(y))"
  }
}

struct Map {
  var riskLevels: [[Int]]
  var tilingFactor: Int
  
  init(description: String, tilingFactor: Int = 1) throws {
    precondition(tilingFactor > 0)
    
    let rows = description.split(separator: "\n")
    guard !rows.isEmpty, rows.allSatisfy({ $0.count == rows[0].count }) else {
      throw ParsingError.illegalInput
    }
    
    self.riskLevels = try rows.map {
      try $0.map {
        guard let num = Int("\($0)") else {
          throw ParsingError.illegalRiskLevel($0)
        }
        return num
      }
    }
    self.tilingFactor = tilingFactor
  }
  
  var start: Coordinate {
    .init(x: 0, y: 0)
  }
  
  var end: Coordinate {
    .init(x: tilingFactor * riskLevels[riskLevels.count-1].count - 1, y: tilingFactor * riskLevels.count - 1)
  }
  
  func isInBounds(_ coord: Coordinate) -> Bool {
    return coord.x >= 0 && coord.y >= 0
      && coord.y < tilingFactor * riskLevels.count
      && coord.x < tilingFactor * riskLevels[0].count
  }
  
  func riskLevel(at coord: Coordinate) -> Int {
    let ty = coord.y / riskLevels.count
    let tx = coord.x / riskLevels[0].count
    precondition(tx < tilingFactor && ty < tilingFactor)
    
    let y = coord.y % riskLevels.count
    let x = coord.x % riskLevels[0].count
    
    var level = riskLevels[y][x] + ty + tx
    while level > 9 { level -= 9 }
    
    return level
  }
  
  func path(from: Coordinate, to: Coordinate) -> [Coordinate] {
    guard isInBounds(from), isInBounds(to) else { return [] }
    
    let heuristic = { (a: Coordinate, b: Coordinate) -> Int in
      abs(a.x - b.x) + abs(a.y - b.y)
    }
    
    var openList = NodeList()
    var closedList = Set<Coordinate>()
    
    openList.insertOrUpdate(.init(cost: 0, estimatedRemaining: heuristic(from, to), coordinate: from))
    
    while let current = openList.pop() {
      if current.coordinate == to {
        return current.path
      }
      
      // finish current
      closedList.insert(current.coordinate)
      
      // expand current
      current.neighbors.forEach { neighbor in
        guard isInBounds(neighbor), !closedList.contains(neighbor) else { return }
        
        // cost for going to neighbor from this node
        let newCost = current.cost + riskLevel(at: neighbor)
        
        // if we already know of a way to reach neighbor that is cheaper, discard
        if let oldCost = openList.cost(at: neighbor), oldCost < newCost { return }
        
        // insert or update node
        openList.insertOrUpdate(.init(cost: newCost, estimatedRemaining: heuristic(neighbor, to), coordinate: neighbor, previous: current))
      }
    }
    
    // no path could be found
    return []
  }
  
  func cost(path: [Coordinate]) -> Int {
    path.dropFirst().reduce(0) { $0 + riskLevel(at: $1) }
  }
  
  func description(highlighting: Set<Coordinate>) -> String {
    (0..<(riskLevels.count*tilingFactor)).map { y in
      (0..<(riskLevels[y % riskLevels.count].count*tilingFactor)).map { x in
        highlighting.contains(.init(x: x, y: y)) ? "." : "\(riskLevel(at: .init(x: x, y: y)))"
      }.joined()
    }.joined(separator: "\n")
  }
}


let testInput = """
1163751742
1381373672
2136511328
3694931569
7463417111
1319128137
1359912421
3125421639
1293138521
2311944581
"""

let input = """
6899398559981949547258793854297238998777719749798917159796618899687398467399925379577862587989991474
5379942478988734273122988989385757497466236693289192366951834829459291799682979611288519663692596298
8798287597929689897189697998519899536166814996869871877395181888988947899479999184396264959716187851
3868296316264598486169599954488593277989992991991613957171593837586927879692269999584919299198529729
7719999887667929137997159819697988999199983984946983118579886899976279796963391897163981988846896135
6739998189663927629889269938986791869444999919267994997136897877889835991768187898799499829977988394
7988583788649299829879981514848137294864722989699668788896499791829699377999859897635314659966261481
9992969672797892589791491158982982492585889799536977249441763249875986327169556286251698984997749818
9718374758574848624698919991181836656698967894599118493858464975792129225978588996976237797737894195
1893825969777924969931987857946995882974888995731816998669193676749873968799711398866998177979689789
3759795779766278838519949548487968384748596657715448479999877448999698477273113999976952939797999137
3792869878699914632622973899759161375991948988793488366996769987961995611928393687767993719868399894
9942897968869298678989516879984599626794899598717691899918359372779984892421689984859112959924689472
8986974958287449242678124196999969497867859938139817219596259977917899879991996999997235251449992892
9393932589987693287868871994537751739997998929291989863497289983976779984189929239897861797119974696
7644877627835923851699265145919979549787871681487584964459776917939961517883677942691588595752298597
7782917899979456965627993989999875893695969689956787938699999771786696989657496171872249318863992988
9699939979999999188268818579888611984999383488981128852596652999813388975989998987488198974791621986
8855949448389977757762785216898414926767698918989963979758999245519788976559869884922771769995695998
6161594972855728799875239948997799599786498788998987839599389797799699385379996998569798848273881991
8849879987995512895983617913392719961983866984975773748976999998979597796629879852188317626397354577
9918714945968972949991887946698488358199888699313826499427999686399169695899988919319799999767473199
5996524691383767631868413993879879289397729799167798829749158289796475719355781941897988959185871995
3671548863949999867599962616976992189997857965187417679377989897595864996189959688921869297998639168
9899888869899457597989991627522994397189991995699897597826952691878696997929893652899411896967929714
7998712697173966917539799489999488829998991615298985594968978829817799698218888399495847464799892896
8697591999289894676979499959726714169871796989826898599626691781699518598585758896419999659969796999
1596769779967498689759885927995189958876981979299351276266375179877391588176879938818569815468999951
9239936979789997972953675459579557995999399997824798899789819389488399998279899482891999869979466297
9862961336489166685698953899736173894695919998296115528189181614387928771489629999856145935996999959
9878796372687498958875478489799487856191971776591798688447913949795879947797267695974595998335766237
3579669986295599447968388999854657533645686894697829945854677988979973948297959175943579195981329558
9889879471197697996865286985852894979699196587598788896498174998988231138617198319985699429879936198
2569929999497772861549279955599759948256671345237589589916773999815195699395998996819598789979214958
2299796872747192635975872966984397912981917297947877844498981195646966824799588896388875584894887662
8897985828526798389979415947284977849996919989826911954671364488599884946996369936998912399219399559
9789869867396839999794988798381369977895979797377699897983873649969879997516315989217888649641593354
9396559295496899449797995999149878148992991887655578998575948899928139657986829949982988388718488968
1219872929688491168976392574875837678818865159629598999856821431859496974969997779589959997389869911
8677996932758699491567769569979887967994199496193284699937779232863993395713788876689947666888699642
6895859796959369982468161218818996999219995982889899867816999154828893696797787199799192984141799892
9724999698987799578316156912172451755981187297873997274399973799915981163774282986481193967782445747
6629975198595889624662945178181299389597998895999894925874697799194599458641859689691891729993275966
9937388695852751794123981948862993181157883278997199253248199592694498999728968898493199131992897875
8138652793591618786586782753999971993578956979797747264617698541297598388968168128848889925191821626
9952193671689277294778995937282491895888171947796739879498547893848388899738979951915599469754998574
5912618789999244872297919879988729117113889566994789997491998999897479714697269992876829898925722782
6992999529957852864712993868998979828846391749534732488988799281871998854992898895999755565696235276
1918668999887419713511881918358999837788938499119795987839895699458923699958379545795179359893659981
6784355989968822853988782395998772939751889862487297199998138254875217989839579791569689918838658899
9597998247788781937583528972969838997798789881799827999894798768285889889879791851473839999878691879
9999989795754894916776297971983688114959129819988685418477379813178929998469568659199968963983768269
9281879896799992299299871778548299974689797199999969199197279938972297719824957838991728399748196894
7358681176989594998874889389138896285912998287398968899257759136791787297999993649458864791768965682
5999887851998697967294538271397663967177946959996187999988882891859538977789979696896296919918999991
7982476991893925899167897294999974788899847819989761986287999544985576888479297375999574968587795164
7788979839695796995933973481446879998989833997777995979988298199999882181147396354994982994786949794
8386149885499696797618975196985997479982968986499698195296791591883912991949988762748856486857617586
1969826289965887984793739999296589399339415889778382714486729519779718418839976599868445929175989287
5953911181958986893699968848839918692897591986992168529255885788876888466867589587748393391193596777
4781988436596599788498955986699591717795727892878591977997174898577915614825899859214849879969946987
7993599858969771875133776815431596997826888544169999898857168147119977935799859919518869724514947698
6483653999998934548388893599245397184767899457972988939286667436998992114798899289398916986979988919
8239538889562698171887886783189959593198687528889836726598985989985997974398578868599359879999179896
5187194954785929819984975598975986868378762999749895637919879916556679887624788396869697134768988979
9798388189853995498798991977659999779479985378697685596953999499972477435996474687499698698953551991
8669995825358857988899699719459511999943338925868799469778759891391968767197858151487512895154964572
7186188958519978986196789958996399498919899525667947197263297931699935947847793276917899579499221359
8868827787956847877438899168279879828298639978975855976933446549889139796168247228469959897765693891
1119949798597699992889737692899988983742759119263697767998868669197235699836794996428591381161567838
2875274999282589569995398511588292924979498989525839668898996664951547671993787386498763984994859694
9969783989199983979678473715266984596998186719185694117834684699699673598616644229921935499699291873
7964759549738689149189129463479486738349611839919955791999939919875888998697729715298423918988984994
2788259353899786474729989945949859275289299119759689193972999214769598979117967954989699889899958658
9299647982219985928831575638982136781891865659193528377991845999569979779876472421966918966369372997
5899989417956578923571378315199921978695174998689868897586389979948879896898934889736923386517989785
9281676849959293979775182877897812493678799161757769999989969867439855125818129442971198699739557388
4475919879957889884939813999776999818798796521879871924749725987894786994958725987778611996824696996
8373791639774379711585898751151997858172797774919959798592979987999867752618819589785168999928696886
9977763998889359799421949996743699894919595899999767854599494798418928495698963462927981796996767593
7158988951987949566758968925188499741457373829952984195653893751921799866679969236327982299919497241
9345768513794668193984199998199919944392417719896282698389649867398962677886696961487194949688797479
9798378451999998499638318999771917477786999563599661159919563675619925415947999864782957569816689998
1587277984899982913961539966769739738598599994764297167417799429515482921298786889996573798136998119
6862877528497478579739956318945612999518811163785996796182641699862228949171568496389633894989134895
9957878484798399612898659161126465965219299893719988819827935779443847419355558585882799958995983898
4929763129667799959194379778917789115795769395671999264898987483889989999299568719389167893855936958
8995464987982983969387667531825997461987985777758646177899688897796796899589838794968888824776649779
8929996779279673991599994397759554491997154696789362571393813932788488169975655899459788181848485291
7396589792884275913849564139497387916794967629367698967893989845694998649396978919889877918997773988
9988814998686188997151816923596528719279865312987374949879598157976131559787915229226192788489999329
7688273881987982597998165459882889534983128846998773385896914973799981259813812977684993589999188891
9863799649697311898116929839876959427498924399396999721972869799563979891552689978998988976585177859
9799289996298785496798779827989419913999926987298641939996735451867517785516917267959949687159335994
2119972966591599875846979198128484976782939992378979999999991952798999819989777999489495973155789988
5594959849679229976592899699982974976329211757419911599863898984795598389963992376969584599961994799
9499915839187619969189833964989988773419999499845897923955958762389687319218355959753893618479513474
9129892175976515849924478398144924927778977956489979498895991666374898686273755959556758677666987856
3798839151427839992617983217951447499399989629999929199899777335443677372798179699999572779989927584
9989369421519694978991559748449571799694789957167495979999319838284795345682191854697182819189591892
"""

func solve1() throws {
  print("part 1:")
  let testMap = try Map(description: testInput)
  let testPath = testMap.path(from: testMap.start, to: testMap.end)
  print(testMap.description(highlighting: .init(testPath)))
  print(testMap.cost(path: testPath))

  let map = try Map(description: input)
  let path = map.path(from: map.start, to: map.end)
  //print(map.description(highlighting: .init(path)))
  print(map.cost(path: path))
}

func solve2() throws {
  print("part 2:")
  let testMap = try Map(description: testInput, tilingFactor: 5)
  let testPath = testMap.path(from: testMap.start, to: testMap.end)
  print(testMap.description(highlighting: .init(testPath)))
  print(testMap.cost(path: testPath))

  let map = try Map(description: input, tilingFactor: 5)
  let path = map.path(from: map.start, to: map.end)
  //print(map.description(highlighting: .init(path)))
  print(map.cost(path: path))
}

try solve1()
try solve2()
